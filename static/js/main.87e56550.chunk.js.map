{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","console","log","target","value","setState","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAsBeA,MAlBf,SAAcC,GACb,IACOC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MAEjB,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAK,cAAcC,IAAG,+BAA0BL,EAA1B,mBAC3B,yBAAKG,UAAW,KACf,gCAAMF,GACN,+BAAKC,EAAL,QC0BWI,MAnCf,YAA4B,IAATC,EAAQ,EAARA,OAclB,OACC,6BAGEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCfHU,MAVf,YAA+C,EAA3BC,YAA4B,IAAfC,EAAc,EAAdA,aAChC,OACC,yBAAKX,UAAU,OAEd,2BAAOA,UAAU,8CAA8CY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,M,MCOvGI,MAZf,SAAgBnB,GAEf,OACC,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEvB,EAAMwB,WCiFKC,E,YAxDd,aAAc,IAAD,8BACZ,+CAmBDC,eAAgB,SAACC,GAChBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAClB,YAAca,EAAMG,OAAOC,SApB1C,EAAKE,MAAO,CACXzB,OAAQ,GACRM,YAAa,IAJF,E,iFAQO,IAAD,OAElBoB,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKN,SAAS,CAACxB,OAAQ8B,S,+BAWhB,IAAD,OACDC,EAAeC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAC,GAE7C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKX,MAAMnB,YAAY6B,kBAIjE,OAFAf,QAAQC,IAAIU,GAEmB,IAA5BC,KAAKP,MAAMzB,OAAOqC,OACb,yCAML,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,MAAd,gBAEA,kBAAC,EAAD,CAAWW,aAAcyB,KAAKd,iBAC9B,kBAAC,EAAD,KAEC,kBAAC,EAAD,CAAUlB,OAAQ+B,U,GA/CPO,IAAMC,WCnBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.87e56550.chunk.js","sourcesContent":["import React from 'react';\n\n/* function Card({id,name,email})*/\n\nfunction Card(props)\n{\n\tconst {id, name, email} = props;\n\n\treturn(\n\t\t\n\t\t<div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt= \"robot-photo\" src={`https://robohash.org/${id}?size=200x150`} />\n\t\t\t<div className= ' '>\n\t\t\t\t<h3> {name}</h3>\n\t\t\t\t<p> {email} </p>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t);\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\n\n// const {robots} =props;\nfunction CardList({robots}){\n\t/*const cardComponent = robots.map((user,i) => {\n\t\treturn (\n\t\t<Card \n\t\tkey={i} \n\t\tid={user.id} \n\t\tname={user.name} \n\t\temail={user.email}\n\t\t/>\n\t\t);\n\t})\n\n\tand use {cardComponent} inside return <div> below*/\n\n\treturn(\n\t\t<div>\n\t\t\t\n\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\tid={user.id} \n\t\t\t\t\t\tname={user.name} \n\t\t\t\t\t\temail={user.email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t    </div>\n\n\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\n/* pure function */\n\nfunction SearchBox({searchfield, searchChange}){\n\treturn(\n\t\t<div className=\"pa2\">\n\n\t\t\t<input className=\"pa3 tc ba br4 ba--light-blue bg-light-green\" type=\"search\" placeholder=\"search robots\" onChange={searchChange} />\n\t\t</div>\n\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\n/* we can add styles in jsx using double square brackets */\nfunction Scroll(props){\n\n\treturn(\n\t\t<div style={{overflowY: 'scroll', border: '1px dashed blue', height: '500px'}}>\n\t\t\t{props.children}\n\n\t\t</div>\n\n\t\t); \n\n}\n\nexport default Scroll;","import React from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport './App.css';\n//import {robots} from '../robots'; //destruct so write in angular brackets\nimport Scroll from '../Components/Scroll';\n\n/* STATE = object that describes our application */\n/* props = properties (never change) */\n\n/*function App(props){\n\treturn (\n\t\t<div className=\"tc\">\n\t\t\t<h1> RoboFriends</h1>\n\n\t\t\t<SearchBox />\n\n\t\t\t<CardList robots={robots}/>\n\t\t</div>\n\n\t\t);\n}*/\n\n/* \nany component that have state uses the class syntax, \nso they can use constructor to create state \nApp component have two states: robots and searchfiled \ncan be passed as props to child\nnot pure function bcoz it contains state\n*/\n\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state ={\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\t/* fetch for making http request to server */\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users =>{\n\t\t\tthis.setState({robots: users });\n\t\t});\n\t\t\n\t}\n\n\tonSearchChange =(event) =>{\n\t\tconsole.log(event.target.value);\n\t\tthis.setState({searchfield : event.target.value});\n\n\t}\n\n\trender(){\n\t\tconst filterRobots = this.state.robots.filter(robot =>\n\t\t{\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\tconsole.log(filterRobots);\n\n\t\tif(this.state.robots.length ===0){\n\t\t\treturn <h1> Loading </h1>\n\n\t\t}\n\t\telse{\n\n\t\t\treturn (\n\t\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t\t<h1 className=\"f2\"> RoboFriends</h1>\n\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t<Scroll>\n\n\t\t\t\t\t\t\t<CardList robots={filterRobots}/>\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t);\n\t\t\t}\n\t}\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}